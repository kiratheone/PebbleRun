package com.arikachmad.pebblerun.integration

/**
 * DISABLED - Architecture Violation
 * 
 * This test was moved out of the domain layer because it violates clean architecture principles:
 * 
 * 1. IMPORTS VIOLATION: The test imports from data and bridge layers:
 *    - com.arikachmad.pebblerun.bridge.location.LocationProvider
 *    - com.arikachmad.pebblerun.bridge.pebble.PebbleTransport  
 *    - com.arikachmad.pebblerun.data.repository.WorkoutRepositoryImpl
 * 
 * 2. DOMAIN LAYER RULES: According to .github/instructions/shared-domain.instructions.md:
 *    - "Pure Kotlin only. NO platform types, I/O, thread, logging, or PebbleKit/CoreLocation calls"
 *    - "Define: Entities/Value Objects, UseCases, Repository interfaces only"
 * 
 * 3. USES OLD RESULT TYPE: Uses com.arikachmad.pebblerun.util.error.Result instead of DomainResult
 * 
 * 4. EXTERNAL DEPENDENCIES: References error recovery, integration managers, and platform-specific components
 * 
 * SOLUTION: This test should be moved to:
 * - shared/data/src/commonTest/ for data layer integration tests
 * - apps/*/src/test/ for platform-specific end-to-end tests
 * - A separate integration test module that can import from all layers
 * 
 * The domain layer now has proper domain-only integration tests in:
 * - WorkoutDomainIntegrationTest.kt (tests use case interactions with domain entities)
 */

/*
ORIGINAL TEST CONTENT WAS HERE - COMMENTED OUT DUE TO ARCHITECTURE VIOLATIONS

The original EndToEndPebbleIntegrationTest contained comprehensive end-to-end testing
scenarios but belonged in a different layer. Key scenarios included:

1. Complete workout session with simulated real-world conditions
2. Workout session handling connection interruptions gracefully  
3. Workout data quality matching real-world expectations
4. System health monitoring during real workout

These scenarios are valuable but should be implemented in the appropriate layer
that can handle dependencies on bridge implementations and data repositories.
*/
